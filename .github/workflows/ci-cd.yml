name: CI/CD Pipeline

on:
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: trends_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U user -d trends_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      # Temporarily skip frontend tests
      # - name: Run frontend tests
      #   working-directory: ./frontend
      #   run: npm test
      - name: Debug Docker CLI
        run: |
          docker version
          docker info
          docker buildx ls

      - name: Set up Docker Buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
      
      - name: Build Docker images
        run: |
          docker buildx build \
            --file ../../backend/Dockerfile \
            --build-arg API_PORT=${{ secrets.API_PORT }} \
            --build-arg CORS_ORIGINS=${{ secrets.CORS_ORIGINS }} \
            --build-arg REDDIT_APPNAME=${{ secrets.REDDIT_APPNAME }} \
            --build-arg REDDIT_CLIENT_ID=${{ secrets.REDDIT_CLIENT_ID }} \
            --build-arg REDDIT_CLIENT_SECRET=${{ secrets.REDDIT_CLIENT_SECRET }} \
            --build-arg REDDIT_PASSWORD=${{ secrets.REDDIT_PASSWORD }} \
            --build-arg REDDIT_USERNAME=${{ secrets.REDDIT_USERNAME }} \
            --build-arg REDDIT_USER_AGENT=${{ secrets.REDDIT_USER_AGENT }} \
            -t trends-backend ../../backend --load
          docker buildx build \
            --file ../../frontend/Dockerfile \
            --build-arg BACKEND_API_URL=${{ secrets.BACKEND_API_URL }} \
            -t trends-frontend ../../frontend --load

      - name: Save Docker images as tar files
        run: |
          docker save trends-backend -o trends-backend.tar
          docker save trends-frontend -o trends-frontend.tar

      - name: Transfer Docker images to server
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: |
            trends-backend.tar
            trends-frontend.tar
          target: /home/${{ secrets.SERVER_USER }}/docker-images/

      - name: Load Docker images on server
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker load -i /home/${{ secrets.SERVER_USER }}/docker-images/trends-backend.tar
            docker load -i /home/${{ secrets.SERVER_USER }}/docker-images/trends-frontend.tar
            docker-compose -f /path/to/docker-compose.yml up -d